#!/bin/bash 
#
# KISS automatic node deployment for VPS (minimalist PAAS) node project bootstrapper 
# in few lines of bash using only git & ssh
#
# Author: Leon van Kammen / Coder of Salvation
# Website: https://github.com/coderofsalvation/nodejs-deploy-githook.bash
# License: AGPL
self_path="$(dirname "$( readlink -f "$0" )" )"
repositories_dir="/var/lib/openshift/55792d7be0b8cd10ec0002b4/app-root/data/repos"
apps_dir="/var/lib/openshift/55792d7be0b8cd10ec0002b4/app-root/data/apps"
port=""

## TEMPLATES #################################################################

package_json='{
  "name": "%s",
  "version": "0.0.1",
  "description": "",
  "main": "app.js",
  "scripts": {
    "test": "echo js-testfile goes here in package.json; exit 0"
  },
  "author": "",
  "license": "GPL3"
}'

githook_post_receive='
# this is the githook template, please modify at will
while read oldrev newrev ref
do
  unset GIT_DIR
  branch=$(echo $ref | cut -d/ -f3)
  trap "echo deployment aborted :( ; exit 1" 1 2 3 4 5 SIGINT SIGTERM
  trigger_hook(){ 
    [[ -f $1 ]] && { echo "trigger $1" | tee -a nohup.out && $1; }
  }

  if [[ "master" == "$branch" ]]; then

    cd "$projectdir" || { echo "$projectdir doesnt exist :("; exit 1; }
    
    trigger_hook .ndg/hooks/stop

    git reset --hard	    
    git pull origin master
    
    trigger_hook .ndg/hooks/build

    npm install 

    trigger_hook .ndg/hooks/patch

    npm test
    
    trigger_hook .ndg/hooks/test

    nohup .ndg/hooks/start >> nohup.out 2>&1 & 

  else 
    echo "no actions for branch $branch"
  fi

done
'
app_config='# this config will be used by ndg and the nodejs application (as env variables)
PROTOCOL=http://

if [[ -n $LIVE ]]; then 
	URL=%s
	HOST=127.0.0.1
	PORT=%s
else 
	URL=%s
	HOST=127.0.0.1
	PORT=%s
fi
'

hook_start='
  trap "echo application was killed | tee -a nohup.out ; exit 1" 1 2 3 4 5 SIGINT SIGTERM
  echo $$ > .pid

  . .ndg/config                                       # read config (port/iface etc)

  forever(){
    echo "$(date) starting $(pwd) at port $PORT" | tee -a nohup.out
    PORT=$PORT HOST=$HOST node server.js
    sleep 2s && forever
  }

  forever
'

hook_stop='
[[ ! -f .pid ]] && { echo "no pidfile found, nothing to stop" | tee -a nohup.out; exit 0; }
pid=$(<.pid);echo "$(date) stopping $(pwd) (pid $pid)" | tee -a >> nohup.out
[[ ${#pid} > 0 ]] &&  kill $(pstree $pid -p -a -l | cut -d, -f2 | cut -d" " -f1) 
exit 0 # else git deployment will halt
'

check(){
  for app in pstree ps sed awk npm node; do which $app &>/dev/null || { echo "please install $app"; exit 1; }; done
  [[ ${#repositories_dir} == 0 ]] && { need_config; exit; }
  [[ ${#apps_dir}     == 0 ]] && { need_config; exit; }
  [[ ! -d "$repositories_dir" ]] && { echo "$repositories_dir does not exist" && need_config; exit 1; }
  [[ ! -d "$apps_dir"     ]] && { echo "$apps_dir does not exist" && need_config; exit 1; }
  [[ ! -n $1 ]] && usage
  return 0
}

print_header(){
  echo "#!/bin/bash"
  echo "set -e # halt on 1st error"
  echo "projectdir='$apps_dir/$name'"
}

# config <apps_dir|repositories_dir> <directory>
config(){
  cp $0 /tmp/.
  case "$1" in 
    apps_dir)     sed -i 's|^apps_dir=.*|apps_dir="'$2'"|g' $(readlink -f $0)
                  echo "updated $1 -> $2"
                  ;;
    repositories_dir) sed -i 's|^repositories_dir=.*|repositories_dir="'$2'"|g' $(readlink -f $0)
                  echo "updated $1 -> $2"
                  ;;
    default)      echo "config variable not found"
                  ;;
  esac 
}

usage(){
  grep -B1 "(){" $0 | grep "^#" | while read line; do echo "usage: ndg ${line//# /}"; done; exit; 
}

# init <id> <port> <http://domain.com>
init(){
  [[ ! -n $2 ]] && { usage; exit; }
  set -u; name="$1"; port="$2"; domainurl="$3"; hookfile=$name/hooks/post-receive 
  {
    cd "$repositories_dir" && git init --bare "$name"
    print_header > "$hookfile"
    echo "$githook_post_receive" >> "$hookfile"
    chmod 755 "$hookfile"
    init_repo "$apps_dir/$name"
    commit_repo
    [[ -f $self_path/.hostname ]] && hostname="$(< $self_path/.hostname)" || {
      hostname="??????"
      echo "warning: please set hostname in file $self_path/.hostname";
    }
    echo -e "clone  repo:    git clone $(whoami)@$hostname:$repositories_dir/$name"
    echo -e "logview app:    ssh $(whoami)@$hostname tailf $apps_dir/$name/nohup.out"
    echo -e "deploy  app:    git push origin master"
  } | console
}

init_repo(){
  echo "--- initing repo"
  set -u; name=$(basename $1); line=""; for((i=0;i<${#name};i++)); do line="$line""="; done
  git clone "$repositories_dir/$name" "$apps_dir/$name"
  cd "$apps_dir/$name" 
  echo -e "$name\n$line\n\ndescription here" > $1/README.md
  touch $1/LICENSE
  init_ndg_hooks "$1"
  printf "$package_json" "$name" > package.json
  echo "var port = process.env.PORT;" > server.js
  echo "node_modules" > .gitignore
}


commit_repo(){
   echo "--- committing README.md, LICENSE and ndg hooks"
   git add . 
   git commit -m "1st commit"
   echo "--- pushing to origin"
   git push origin master
}

init_ndg_hooks(){
  echo "--- initing .ndg/hooks/"
  [[ ! -d $1/.ndg/hooks ]] && mkdir -p $1/.ndg/hooks 
  for file in build patch test start stop; do 
    echo -e "#!/bin/bash\n# this hook gets executed during $file-stage of deployment" > $1/.ndg/hooks/$file; 
  done 
  printf "$app_config" "$domainurl" "$port" "$domainurl" "$port" > $1/.ndg/config
  echo   "$hook_start" > $1/.ndg/hooks/start
  printf "$hook_stop"  "$port"   > $1/.ndg/hooks/stop
  chmod 755 $1/.ndg/hooks/* 
}

# app <list|start|stop|symlink|restart|status|logtail|delete> <appid>
app(){
  [[ ! -n "$2" ]] && [[ ! "$1" == "list" ]] && { usage; exit 0; }
  [[ ! -d "$apps_dir/$2" ]]         && { echo "$apps_dir/$2 does not exist"; exit 1; }
  pid=$(cat "$apps_dir/$2/.pid" 2>/dev/null)
  ok=0
  cd $apps_dir/$2
  case "$1" in
    list)       ls 
                ;;

    status)     kill -0 "$pid"; ok=$? 
		[[ $ok == 1 ]] && not="not" || not=""
                echo "app $2 is $not running (pid=$pid)"; 
                ;;
    stop)       .ndg/hooks/stop
                ;;
    start)      kill -0 "$pid" &>/dev/null && { echo "app $2 is already running (pid=$pid)"; exit 0; }
		echo starting
                nohup .ndg/hooks/start 1>> nohup.out 2>&1 &
		;;
    restart)    .ndg/hooks/stop
                nohup .ndg/hooks/start 1>> nohup.out 2>&1 &
                ;;
    delete)     .ndg/hooks/stop
		echo "about to delete app in 5 seconds..press ctrl-c to abort"
		echo "rm -rf $apps_dir/$2 $repositories_dir/$2"
		sleep 5s
		rm -rf $apps_dir/$2
                [[ -d $repositories_dir/$2 ]] && rm $repositories_dir/$2
                ;;
    symlink)    [[ ! -n $5 ]] && { echo "usage: ndg app symlink <appname> <appname-2> <port> <http://domainurl>"; exit 0; }
		mkdir $apps_dir/$3
                cd $apps_dir/$3 
                find $apps_dir/$2 -maxdepth 1 | while read file; do ln -s "$file" .; done 
                rm -rf .pid nohup.out .ndg
                cp -R $apps_dir/$2/.ndg .
                cd .ndg
                . config 
                file="$(<config)"
		rm config
                echo "$file" > config 
                sed -i 's/PORT=.*/PORT='$4'/g' config
                sed -i 's|URL=.*|URL='$5'|g' config
		echo "done, here's the config: "
		cat config
                ;;
    logtail)    echo "tailing $apps_dir/$2/nohup.out"
		tailf $apps_dir/$2/nohup.out
                ;;
    *)          echo "unknown action '$1'"
                ;;
  esac
  exit $ok 
}

need_config(){
  echo -e "we need to know where to store your repositories_dir and where your applications should run\n"
  echo "please run: $(basename $0) config repositories_dir <repositorydir>"; 
  echo "            $(basename $0) config apps_dir     <appdir>";
}

console(){
  cat - | while IFS='' read line; do echo "ngd> $line"; done
}

[[ "$1" == "config" ]] && "$@" && exit
check "$@" && "$@" 2>&1 
